import struct

def float_to_bytes(float):
    ''' Creates a bytes object with four bytes '''
    return struct.pack('f', float)

def bytes_to_float(bytes):
    ''' Returns the first element of a tuple '''
    return struct.unpack('f', bytes)[0]

def xor_bytes(bytes1, bytes2):
    ''' Returns the XOR of two bytes objects '''
    return bytes([b1 ^ b2 for b1, b2 in zip(bytes1, bytes2)])

def print_bytes(bytes):
    ''' Prints a bytes object as a byte string '''
    
    out = ''
    for b in bytes:
        # Get rid of 0b prefix and pad start with zeros
        string = bin(b)[2:]
        string = '0' * (8 - len(string)) + string
        # Add a space every 8 bits
        out += string + ' '
    
    print(out)

def AES_sub_bytes(byte):
    # Create dict of s-box values and inverse s-box values
    s_box = {
        '00': '63', '10': 'ca', '20': 'b7', '30': '04', '40': '09', '50': '53', '60': 'd0', '70': '51', '80': 'cd', '90': '60', 'a0': 'e0', 'b0': 'e7', 'c0': 'ba', 'd0': '70', 'e0': 'e1', 'f0': '8c',
        '01': '7c', '11': '82', '21': 'fd', '31': 'c7', '41': '83', '51': 'd1', '61': 'ef', '71': 'a3', '81': '0c', '91': '81', 'a1': '32', 'b1': 'c8', 'c1': '78', 'd1': '3e', 'e1': 'f8', 'f1': 'a1',
        '02': '77', '12': 'c9', '22': '93', '32': '23', '42': '2c', '52': '00', '62': 'aa', '72': '40', '82': '13', '92': '4f', 'a2': '3a', 'b2': '37', 'c2': '25', 'd2': 'b5', 'e2': '98', 'f2': '89',
        '03': '7b', '13': '7d', '23': '26', '33': 'c3', '43': '1a', '53': 'ed', '63': 'fb', '73': '8f', '83': 'ec', '93': 'dc', 'a3': '0a', 'b3': '6d', 'c3': '2e', 'd3': '66', 'e3': '11', 'f3': '0d',
        '04': 'f2', '14': 'fa', '24': '36', '34': '18', '44': '1b', '54': '20', '64': '43', '74': '92', '84': '5f', '94': '22', 'a4': '49', 'b4': '8d', 'c4': '1c', 'd4': '48', 'e4': '69', 'f4': 'bf',
        '05': '6b', '15': '59', '25': '3f', '35': '96', '45': '6e', '55': 'fc', '65': '4d', '75': '9d', '85': '97', '95': '2a', 'a5': '06', 'b5': 'd5', 'c5': 'a6', 'd5': '03', 'e5': 'd9', 'f5': 'e6',
        # continue bug fixes below
        '06': '6a', '16': 'ce', '26': 'a5', '36': '30', '46': 'bc', '56': '9f', '66': 'f9', '76': 'de', '86': '4b', '96': 'f3', 'a6': 'a4', 'b6': 'b3', 'c6': 'b0', 'd6': '43', 'e6': '4d', 'f6': '33',
        '07': 'd9', '17': 'e8', '27': '4e', '37': 'a6', '47': '6b', '57': 'c1', '67': '94', '77': '42', '87': '58', '97': '8d', 'a7': '57', 'b7': '62', 'c7': '70', 'd7': 'b1', 'e7': '16', 'f7': '1d',
        '08': '9e', '18': '6c', '28': 'e3', '38': '5a', '48': 'a0', '58': '52', '68': '3b', '78': 'd6', '88': 'b3', '98': '29', 'a8': 'e9', 'b8': '2f', 'c8': '84', 'd8': '53', 'e8': 'd1', 'f8': '00',
        '09': '6e', '19': '16', '29': '24', '39': '5c', '49': 'c2', '59': 'd3', '69': 'ac', '79': '62', '89': '91', '99': '95', 'a9': 'e7', 'b9': 'a8', 'c9': '96', 'd9': '98', 'e9': '03', 'f9': 'b9',
        '0a': '43', '1a': '9a', '2a': 'eb', '3a': '7a', '4a': '04', '5a': 'c6', '6a': '56', '7a': '32', '8a': 'dd', '9a': '1f', 'aa': 'a1', 'ba': '1e', 'ca': '0e', 'da': 'ad', 'ea': '0f', 'fa': 'b0',
        '0b': '4d', '1b': 'c7', '2b': 'c8', '3b': '1b', '4b': '19', '5b': 'fd', '6b': '37', '7b': 'c9', '8b': '8e', '9b': '9b', 'ab': 'b7', 'bb': 'a7', 'cb': '2d', 'db': 'bf', 'eb': 'b5', 'fb': 'c0',
        '0c': 'a2', '1c': '8f', '2c': '5d', '3c': 'e1', '4c': 'e2', '5c': '1d', '6c': 'f4', '7c': '3f', '8c': 'c3', '9c': 'dc', 'ac': '0d', 'bc': '5e', 'cc': 'a9', 'dc': '6f', 'ec': '17', 'fc': 'f1',
        '0d': 'b6', '1d': '6b', '2d': '39', '3d': '4a', '4d': 'd4', '5d': '4c', '6d': '58', '7d': 'cf', '8d': 'd0', '9d': 'ef', 'ad': 'aa', 'bd': 'fb', 'cd': '43', 'dd': '4d', 'ed': '33', 'fd': '85',
        '0e': 'a3', '1e': 'e0', '2e': 'f5', '3e': 'a8', '4e': 'f8', '5e': 'b8', '6e': 'b6', '7e': 'c4', '8e': 'e7', '9e': 'e6', 'ae': '73', 'be': 'd8', 'ce': '3c', 'de': '35', 'ee': '8c', 'fe': 'f2',
        '0f': '9d', '1f': 'a0', '2f': 'a2', '3f': '5f', '4f': 'e8', '5f': 'e9', '6f': 'cf', '7f': 'd9', '8f': 'e4', '9f': 'd7', 'af': 'a3', 'bf': 'd2', 'cf': 'c0', 'df': '3e', 'ef': 'b4', 'ff': '7e'
    }
    pass

b1 = float_to_bytes(3.14159)
b2 = float_to_bytes(2.71828)
b3 = xor_bytes(b1, b2)

print(bytes_to_float(b3))